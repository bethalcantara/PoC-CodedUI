// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 16.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUIPOC
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinListItem uIExpenseIt9exeShortcuListItem = this.UIProgramManagerWindow.UIDesktopList.UIExpenseIt9exeShortcuListItem;
            WpfText uIMikeText = this.UIExpenseItWindow.UINamesList.UIMikeListItem.UISystemXmlXmlAttributText.UIMikeText;
            WpfButton uIViewButton = this.UIExpenseItWindow.UIViewButton;
            WpfCell uIItem50Cell = this.UIExpenseItWindow.UIExpensereportTable.UIDataGridRowRow.UIItem50Cell;
            WpfCell uIItem50Cell1 = this.UIExpenseItWindow.UIExpensereportTable.UIDataGridRowRow1.UIItem50Cell;
            WpfWindow uIExpenseItWindow1 = this.UIExpenseItWindow;
            WpfEdit uIItemEdit = this.UIExpenseItWindow.UIExpensereportTable.UIDataGridRowRow1.UIItem50Cell.UIItemEdit;
            WpfButton uIBackButton = this.UIExpenseItWindow.UIBackButton;
            WpfText uIJohnText = this.UIExpenseItWindow.UINamesList1.UIJohnListItem.UISystemXmlXmlAttributText.UIJohnText;
            WpfList uINamesList1 = this.UIExpenseItWindow.UINamesList1;
            WpfButton uIForwardButton = this.UIExpenseItWindow.UIForwardButton;
            WpfList uINamesList2 = this.UIExpenseItWindow.UINamesList2;
            WpfButton uIViewButton1 = this.UIExpenseItWindow.UIViewButton1;
            WpfText uIItem50Text = this.UIExpenseItWindow.UIExpensereportTable1.UIDataGridRowRow.UIItem50Cell.UIItem50Text;
            #endregion

            // Click 'ExpenseIt9.exe - Shortcut' list item
            Mouse.Click(uIExpenseIt9exeShortcuListItem, new Point(28, 30));

            // Launch 'C:\workspace\WalkthroughFirstWPFApp\csharp\bin\Debug\netcoreapp3.1\ExpenseIt9.exe'
            ApplicationUnderTest uIExpenseItWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIExpenseItWindowExePath, this.RecordedMethod1Params.UIExpenseItWindowAlternateExePath);

            // Click 'Mike' label
            Mouse.Click(uIMikeText, new Point(21, 8));

            // Click 'View' button
            Mouse.Click(uIViewButton, new Point(60, 12));

            // Type '589' in '50' cell
            uIItem50Cell.Value = this.RecordedMethod1Params.UIItem50CellValue;

            // Type '111' in '50' cell
            uIItem50Cell1.Value = this.RecordedMethod1Params.UIItem50CellValue1;

            // Click 'ExpenseIt' window
            Mouse.Click(uIExpenseItWindow1, new Point(396, 260));

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.RecordedMethod1Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(11, 14));

            // Click 'John' label
            Mouse.Click(uIJohnText, new Point(15, 9));

            // Select 'Lisa' in 'Names' list box
            uINamesList1.SelectedItemsAsString = this.RecordedMethod1Params.UINamesList1SelectedItemsAsString;

            // Click 'Forward' button
            Mouse.Click(uIForwardButton, new Point(9, 10));

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(11, 16));

            // Select 'Mike' in 'Names' list box
            uINamesList2.SelectedItemsAsString = this.RecordedMethod1Params.UINamesList2SelectedItemsAsString;

            // Click 'Forward' button
            Mouse.Click(uIForwardButton, new Point(15, 11));

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(9, 18));

            // Click 'View' button
            Mouse.Click(uIViewButton1, new Point(37, 7));

            // Click '50' label
            Mouse.Click(uIItem50Text, new Point(14, 8));

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(15, 11));

            // Click 'Forward' button
            Mouse.Click(uIForwardButton, new Point(7, 12));

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(10, 12));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WpfList uINamesList = this.UIExpenseItWindow.UINamesList;
            WpfButton uIViewButton = this.UIExpenseItWindow.UIViewButton;
            WpfCell uIDocumentprintingCell = this.UIExpenseItWindow.UIExpensereportTable.UIDataGridRowRow.UIDocumentprintingCell;
            WpfEdit uIItemEdit = this.UIExpenseItWindow.UIExpensereportTable.UIDataGridRowRow.UIDocumentprintingCell.UIItemEdit;
            #endregion

            // Launch 'C:\workspace\WalkthroughFirstWPFApp\csharp\bin\Debug\netcoreapp3.1\ExpenseIt9.exe'
            ApplicationUnderTest uIExpenseItWindow = ApplicationUnderTest.Launch(this.RecordedMethod2Params.UIExpenseItWindowExePath, this.RecordedMethod2Params.UIExpenseItWindowAlternateExePath);

            // Select 'Lisa' in 'Names' list box
            uINamesList.SelectedItemsAsString = this.RecordedMethod2Params.UINamesListSelectedItemsAsString;

            // Click 'View' button
            Mouse.Click(uIViewButton, new Point(54, 18));

            // Type 'printing' in 'Document printing' cell
            uIDocumentprintingCell.Value = this.RecordedMethod2Params.UIDocumentprintingCellValue;

            // Type '{Back}{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.RecordedMethod2Params.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIExpenseItWindow UIExpenseItWindow
        {
            get
            {
                if ((this.mUIExpenseItWindow == null))
                {
                    this.mUIExpenseItWindow = new UIExpenseItWindow();
                }
                return this.mUIExpenseItWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIExpenseItWindow mUIExpenseItWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch 'C:\workspace\WalkthroughFirstWPFApp\csharp\bin\Debug\netcoreapp3.1\ExpenseIt9.exe'
        /// </summary>
        public string UIExpenseItWindowExePath = "C:\\workspace\\WalkthroughFirstWPFApp\\csharp\\bin\\Debug\\netcoreapp3.1\\ExpenseIt9.exe" +
            "";
        
        /// <summary>
        /// Launch 'C:\workspace\WalkthroughFirstWPFApp\csharp\bin\Debug\netcoreapp3.1\ExpenseIt9.exe'
        /// </summary>
        public string UIExpenseItWindowAlternateExePath = "C:\\workspace\\WalkthroughFirstWPFApp\\csharp\\bin\\Debug\\netcoreapp3.1\\ExpenseIt9.exe" +
            "";
        
        /// <summary>
        /// Type '589' in '50' cell
        /// </summary>
        public string UIItem50CellValue = "589";
        
        /// <summary>
        /// Type '111' in '50' cell
        /// </summary>
        public string UIItem50CellValue1 = "111";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'Lisa' in 'Names' list box
        /// </summary>
        public string UINamesList1SelectedItemsAsString = "Lisa";
        
        /// <summary>
        /// Select 'Mike' in 'Names' list box
        /// </summary>
        public string UINamesList2SelectedItemsAsString = "Mike";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch 'C:\workspace\WalkthroughFirstWPFApp\csharp\bin\Debug\netcoreapp3.1\ExpenseIt9.exe'
        /// </summary>
        public string UIExpenseItWindowExePath = "C:\\workspace\\WalkthroughFirstWPFApp\\csharp\\bin\\Debug\\netcoreapp3.1\\ExpenseIt9.exe" +
            "";
        
        /// <summary>
        /// Launch 'C:\workspace\WalkthroughFirstWPFApp\csharp\bin\Debug\netcoreapp3.1\ExpenseIt9.exe'
        /// </summary>
        public string UIExpenseItWindowAlternateExePath = "C:\\workspace\\WalkthroughFirstWPFApp\\csharp\\bin\\Debug\\netcoreapp3.1\\ExpenseIt9.exe" +
            "";
        
        /// <summary>
        /// Select 'Lisa' in 'Names' list box
        /// </summary>
        public string UINamesListSelectedItemsAsString = "Lisa";
        
        /// <summary>
        /// Type 'printing' in 'Document printing' cell
        /// </summary>
        public string UIDocumentprintingCellValue = "printing";
        
        /// <summary>
        /// Type '{Back}{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Back}{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UIExpenseIt9exeShortcuListItem
        {
            get
            {
                if ((this.mUIExpenseIt9exeShortcuListItem == null))
                {
                    this.mUIExpenseIt9exeShortcuListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIExpenseIt9exeShortcuListItem.SearchProperties[WinListItem.PropertyNames.Name] = "ExpenseIt9.exe - Shortcut";
                    this.mUIExpenseIt9exeShortcuListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIExpenseIt9exeShortcuListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIExpenseIt9exeShortcuListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIExpenseItWindow : WpfWindow
    {
        
        public UIExpenseItWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "ExpenseIt";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public UINamesList UINamesList
        {
            get
            {
                if ((this.mUINamesList == null))
                {
                    this.mUINamesList = new UINamesList(this);
                }
                return this.mUINamesList;
            }
        }
        
        public WpfButton UIViewButton
        {
            get
            {
                if ((this.mUIViewButton == null))
                {
                    this.mUIViewButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIViewButton.SearchProperties[WpfButton.PropertyNames.Name] = "View";
                    this.mUIViewButton.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIViewButton;
            }
        }
        
        public UIExpensereportTable UIExpensereportTable
        {
            get
            {
                if ((this.mUIExpensereportTable == null))
                {
                    this.mUIExpensereportTable = new UIExpensereportTable(this);
                }
                return this.mUIExpensereportTable;
            }
        }
        
        public WpfButton UIBackButton
        {
            get
            {
                if ((this.mUIBackButton == null))
                {
                    this.mUIBackButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBackButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BrowseBack";
                    this.mUIBackButton.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIBackButton;
            }
        }
        
        public UINamesList1 UINamesList1
        {
            get
            {
                if ((this.mUINamesList1 == null))
                {
                    this.mUINamesList1 = new UINamesList1(this);
                }
                return this.mUINamesList1;
            }
        }
        
        public WpfButton UIForwardButton
        {
            get
            {
                if ((this.mUIForwardButton == null))
                {
                    this.mUIForwardButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIForwardButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BrowseForward";
                    this.mUIForwardButton.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIForwardButton;
            }
        }
        
        public WpfList UINamesList2
        {
            get
            {
                if ((this.mUINamesList2 == null))
                {
                    this.mUINamesList2 = new WpfList(this);
                    #region Search Criteria
                    this.mUINamesList2.SearchProperties[WpfList.PropertyNames.AutomationId] = "peopleListBox";
                    this.mUINamesList2.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUINamesList2;
            }
        }
        
        public WpfButton UIViewButton1
        {
            get
            {
                if ((this.mUIViewButton1 == null))
                {
                    this.mUIViewButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIViewButton1.SearchProperties[WpfButton.PropertyNames.Name] = "View";
                    this.mUIViewButton1.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIViewButton1;
            }
        }
        
        public UIExpensereportTable1 UIExpensereportTable1
        {
            get
            {
                if ((this.mUIExpensereportTable1 == null))
                {
                    this.mUIExpensereportTable1 = new UIExpensereportTable1(this);
                }
                return this.mUIExpensereportTable1;
            }
        }
        #endregion
        
        #region Fields
        private UINamesList mUINamesList;
        
        private WpfButton mUIViewButton;
        
        private UIExpensereportTable mUIExpensereportTable;
        
        private WpfButton mUIBackButton;
        
        private UINamesList1 mUINamesList1;
        
        private WpfButton mUIForwardButton;
        
        private WpfList mUINamesList2;
        
        private WpfButton mUIViewButton1;
        
        private UIExpensereportTable1 mUIExpensereportTable1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UINamesList : WpfList
    {
        
        public UINamesList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "peopleListBox";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public UIMikeListItem UIMikeListItem
        {
            get
            {
                if ((this.mUIMikeListItem == null))
                {
                    this.mUIMikeListItem = new UIMikeListItem(this);
                }
                return this.mUIMikeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIMikeListItem mUIMikeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIMikeListItem : WpfListItem
    {
        
        public UIMikeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Mike";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public UISystemXmlXmlAttributText UISystemXmlXmlAttributText
        {
            get
            {
                if ((this.mUISystemXmlXmlAttributText == null))
                {
                    this.mUISystemXmlXmlAttributText = new UISystemXmlXmlAttributText(this);
                }
                return this.mUISystemXmlXmlAttributText;
            }
        }
        #endregion
        
        #region Fields
        private UISystemXmlXmlAttributText mUISystemXmlXmlAttributText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UISystemXmlXmlAttributText : WpfText
    {
        
        public UISystemXmlXmlAttributText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "System.Xml.XmlAttribute";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public WpfText UIMikeText
        {
            get
            {
                if ((this.mUIMikeText == null))
                {
                    this.mUIMikeText = new WpfText(this);
                    #region Search Criteria
                    this.mUIMikeText.SearchProperties[WpfText.PropertyNames.Name] = "Mike";
                    this.mUIMikeText.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIMikeText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIMikeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIExpensereportTable : WpfTable
    {
        
        public UIExpensereportTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Expense report";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public UIDataGridRowRow UIDataGridRowRow
        {
            get
            {
                if ((this.mUIDataGridRowRow == null))
                {
                    this.mUIDataGridRowRow = new UIDataGridRowRow(this);
                }
                return this.mUIDataGridRowRow;
            }
        }
        
        public UIDataGridRowRow1 UIDataGridRowRow1
        {
            get
            {
                if ((this.mUIDataGridRowRow1 == null))
                {
                    this.mUIDataGridRowRow1 = new UIDataGridRowRow1(this);
                }
                return this.mUIDataGridRowRow1;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridRowRow mUIDataGridRowRow;
        
        private UIDataGridRowRow1 mUIDataGridRowRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIDataGridRowRow : WpfRow
    {
        
        public UIDataGridRowRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "DataGrid Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public WpfCell UIItem50Cell
        {
            get
            {
                if ((this.mUIItem50Cell == null))
                {
                    this.mUIItem50Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIItem50Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Amount";
                    this.mUIItem50Cell.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIItem50Cell;
            }
        }
        
        public UIDocumentprintingCell UIDocumentprintingCell
        {
            get
            {
                if ((this.mUIDocumentprintingCell == null))
                {
                    this.mUIDocumentprintingCell = new UIDocumentprintingCell(this);
                }
                return this.mUIDocumentprintingCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIItem50Cell;
        
        private UIDocumentprintingCell mUIDocumentprintingCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIDocumentprintingCell : WpfCell
    {
        
        public UIDocumentprintingCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "ExpenseType";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIDataGridRowRow1 : WpfRow
    {
        
        public UIDataGridRowRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "DataGrid Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public UIItem50Cell UIItem50Cell
        {
            get
            {
                if ((this.mUIItem50Cell == null))
                {
                    this.mUIItem50Cell = new UIItem50Cell(this);
                }
                return this.mUIItem50Cell;
            }
        }
        #endregion
        
        #region Fields
        private UIItem50Cell mUIItem50Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIItem50Cell : WpfCell
    {
        
        public UIItem50Cell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Amount";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UINamesList1 : WpfList
    {
        
        public UINamesList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "peopleListBox";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public UIJohnListItem UIJohnListItem
        {
            get
            {
                if ((this.mUIJohnListItem == null))
                {
                    this.mUIJohnListItem = new UIJohnListItem(this);
                }
                return this.mUIJohnListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIJohnListItem mUIJohnListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIJohnListItem : WpfListItem
    {
        
        public UIJohnListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "John";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public UISystemXmlXmlAttributText1 UISystemXmlXmlAttributText
        {
            get
            {
                if ((this.mUISystemXmlXmlAttributText == null))
                {
                    this.mUISystemXmlXmlAttributText = new UISystemXmlXmlAttributText1(this);
                }
                return this.mUISystemXmlXmlAttributText;
            }
        }
        #endregion
        
        #region Fields
        private UISystemXmlXmlAttributText1 mUISystemXmlXmlAttributText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UISystemXmlXmlAttributText1 : WpfText
    {
        
        public UISystemXmlXmlAttributText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "System.Xml.XmlAttribute";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public WpfText UIJohnText
        {
            get
            {
                if ((this.mUIJohnText == null))
                {
                    this.mUIJohnText = new WpfText(this);
                    #region Search Criteria
                    this.mUIJohnText.SearchProperties[WpfText.PropertyNames.Name] = "John";
                    this.mUIJohnText.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIJohnText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIJohnText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIExpensereportTable1 : WpfTable
    {
        
        public UIExpensereportTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Expense report";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public UIDataGridRowRow2 UIDataGridRowRow
        {
            get
            {
                if ((this.mUIDataGridRowRow == null))
                {
                    this.mUIDataGridRowRow = new UIDataGridRowRow2(this);
                }
                return this.mUIDataGridRowRow;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridRowRow2 mUIDataGridRowRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIDataGridRowRow2 : WpfRow
    {
        
        public UIDataGridRowRow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "DataGrid Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public UIItem50Cell1 UIItem50Cell
        {
            get
            {
                if ((this.mUIItem50Cell == null))
                {
                    this.mUIItem50Cell = new UIItem50Cell1(this);
                }
                return this.mUIItem50Cell;
            }
        }
        #endregion
        
        #region Fields
        private UIItem50Cell1 mUIItem50Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIItem50Cell1 : WpfCell
    {
        
        public UIItem50Cell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Amount";
            this.WindowTitles.Add("ExpenseIt");
            #endregion
        }
        
        #region Properties
        public WpfText UIItem50Text
        {
            get
            {
                if ((this.mUIItem50Text == null))
                {
                    this.mUIItem50Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem50Text.SearchProperties[WpfText.PropertyNames.Name] = "50";
                    this.mUIItem50Text.WindowTitles.Add("ExpenseIt");
                    #endregion
                }
                return this.mUIItem50Text;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItem50Text;
        #endregion
    }
}
